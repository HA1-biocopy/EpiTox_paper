summary_table <- summarize_assessment(assessed_peptides)
print(summary_table)
# Create visualizations
print("\n=== GENERATING PLOTS ===")
plot1 <- plot_probability_distribution(assessed_peptides)
print(plot1)
plot2 <- plot_prior_vs_posterior(assessed_peptides)
print(plot2)
# Sort by posterior probability (highest concern first)
assessed_peptides_sorted <- assessed_peptides %>%
arrange(desc(posterior_prob))
print("\n=== TOP PRIORITY PEPTIDES (Highest Posterior Probability) ===")
print(assessed_peptides_sorted[, c("peptide_id", "sequence", "posterior_prob",
"confidence_level", "interpretation")])
files = list.files(path = "~/Documents/Projects/MAGEA3/results/Cutoff_4/PrediTopes/DB_annotation/",
pattern = "*sequence.csv", full.names = T)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
mhc_restriction, qualitative_measure, mhc_class, mhc_allele_name,
assay_names,  mhc_allele_evidence, disease_names) %>%
dplyr::rename(uniprot = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names)
return(x)
}) %>%
do.call("rbind",.)
View(df)
head(df)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
mhc_restriction, qualitative_measure, mhc_class, mhc_allele_name,
assay_names,  mhc_allele_evidence, disease_names) %>%
dplyr::rename(uniprot = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\(UniProt\\:", "", gsub("\\)$", "", uniprot)))
head(df)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
mhc_restriction, qualitative_measure, mhc_class, mhc_allele_name,
assay_names,  mhc_allele_evidence, disease_names) %>%
dplyr::rename(Gene.Name = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\(UniProt\\:", "", gsub("\\)$", "", curated_source_antigen.accession)))
head(df)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
mhc_restriction, qualitative_measure, mhc_class, mhc_allele_name,
assay_names,  mhc_allele_evidence, disease_names) %>%
dplyr::rename(Gene.Name = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession))
head(df)
if (file.size(f) == 0) return(NULL)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
mhc_restriction, qualitative_measure, mhc_class, mhc_allele_name,
assay_names,  mhc_allele_evidence, disease_names) %>%
dplyr::rename(Gene.Name = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
curated_source_antigen.accession = NULL)
head(df)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
qualitative_measure, mhc_class, mhc_allele_name,
assay_names, disease_names) %>% # , mhc_allele_evidence, mhc_restriction
dplyr::rename(Gene.Name = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names,
Experimental_method = assay_names,
Binding = qualitative_measure,
hla_class = mhc_class,
hla_allele = mhc_allele_name)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
curated_source_antigen.accession = NULL)
head(df)
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx")
cutoff_4[1,]
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas)
View(cutoff_4)
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
qualitative_measure, mhc_class, mhc_allele_name,
assay_names, disease_names) %>% # , mhc_allele_evidence, mhc_restriction
dplyr::rename(#Gene.Names = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names,
Experimental_method = assay_names,
Binding = qualitative_measure,
hla_class = mhc_class,
hla_allele = mhc_allele_name)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
curated_source_antigen.accession = NULL,
id = paste0(uniprot, "_", peptide))
View(df)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
qualitative_measure, mhc_class, mhc_allele_name,
assay_names, disease_names) %>% # , mhc_allele_evidence, mhc_restriction
dplyr::rename(#Gene.Names = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names,
Experimental_method = assay_names,
Binding = qualitative_measure,
hla_class = mhc_class,
hla_allele = mhc_allele_name)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
curated_source_antigen.accession = NULL,
id = paste0(uniprot, "_", peptide),
uniprot = NULL, peptide = NULL)
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
qualitative_measure, mhc_class, mhc_allele_name,
assay_names, disease_names) %>% # , mhc_allele_evidence, mhc_restriction
dplyr::rename(#Gene.Names = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names,
Experimental_method = assay_names,
Binding = qualitative_measure,
hla_class = mhc_class,
hla_allele = mhc_allele_name)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
curated_source_antigen.accession = NULL,
id = paste0(uniprot, "_", peptide),
uniprot = NULL, peptide = NULL) %>%
relocate(id)
head(df)
df$disease %>% unique() %>% length()
df$disease %>% unique()
df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
qualitative_measure, mhc_class, mhc_allele_name,
assay_names, disease_names) %>% # , mhc_allele_evidence, mhc_restriction
dplyr::rename(#Gene.Names = parent_source_antigen_name,
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names,
Experimental_method = assay_names,
Binding = qualitative_measure,
hla_class = mhc_class,
hla_allele = mhc_allele_name)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
disease = gsub("\\[\\'(.+)\\'\\]", "\\1", disease),
curated_source_antigen.accession = NULL,
id = paste0(uniprot, "_", peptide),
uniprot = NULL, peptide = NULL) %>%
relocate(id)
df$disease %>% unique()
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
relocate(id)
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
merge(., df, by = "id", all.x =T)
View(cutoff_4)
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
merge(., df, by = "id", all.x =T) %>%
distinct(.keep_all = T)
summary(df)
# Show me the structure
head(df, 10)
unique(df$Binding)
unique(df$disease)
unique(df$hla_class)
table(df$hla_allele)  # top alleles
library(tidyr)
preprocess_peptide_data <- function(df,
target_allele = NULL,
target_disease = NULL,
target_class = "I") {
cat("Starting preprocessing...\n")
cat("Original rows:", nrow(df), "\n")
# -------------------------------------------------------------------------
# 1. AGGREGATE BY PEPTIDE ID (count studies/evidence)
# -------------------------------------------------------------------------
cat("\n1. Aggregating evidence by peptide...\n")
peptide_evidence <- df %>%
group_by(id) %>%
summarise(
# Count unique studies
n_studies = n_distinct(study_ref, na.rm = TRUE),
# Get all unique study references
study_refs = paste(unique(study_ref), collapse = ";"),
# Aggregate other info (take first non-NA value or most common)
parent_source = first(parent_source_antigen_name),
hla_class = first(na.omit(hla_class)),
hla_allele = first(na.omit(hla_allele)),
# Binding: prioritize strongest evidence
binding_values = paste(unique(Binding), collapse = ";"),
# Disease: collect all unique diseases
diseases = paste(unique(disease[disease != ""]), collapse = ";"),
# Methods used
methods = paste(unique(Experimental_method), collapse = ";"),
.groups = "drop"
)
cat("   Unique peptides:", nrow(peptide_evidence), "\n")
cat("   Studies per peptide - Min:", min(peptide_evidence$n_studies),
"Max:", max(peptide_evidence$n_studies),
"Median:", median(peptide_evidence$n_studies), "\n")
# -------------------------------------------------------------------------
# 2. CREATE EVIDENCE COLUMN
# -------------------------------------------------------------------------
cat("\n2. Categorizing evidence levels...\n")
peptide_evidence <- peptide_evidence %>%
mutate(
evidence = case_when(
n_studies >= 3 ~ "multiple_studies",
n_studies == 2 ~ "one_study",  # Being conservative: 2 studies = "one study" level
n_studies == 1 ~ "one_database",
TRUE ~ "predicted"  # Shouldn't happen with this data
)
)
cat("   Evidence distribution:\n")
print(table(peptide_evidence$evidence))
# -------------------------------------------------------------------------
# 3. PROCESS BINDING AFFINITY
# -------------------------------------------------------------------------
cat("\n3. Processing binding affinity...\n")
peptide_evidence <- peptide_evidence %>%
mutate(
binding_affinity = case_when(
grepl("Positive-High", binding_values, ignore.case = TRUE) ~ "strong",
grepl("Positive-Intermediate", binding_values, ignore.case = TRUE) ~ "intermediate",
grepl("Positive-Low", binding_values, ignore.case = TRUE) ~ "weak",
grepl("Positive", binding_values, ignore.case = TRUE) ~ "intermediate",  # Generic "Positive"
grepl("Negative", binding_values, ignore.case = TRUE) ~ "weak",
TRUE ~ NA_character_
),
binding_metric = NA_character_  # Not numeric in this dataset
)
cat("   Binding distribution:\n")
print(table(peptide_evidence$binding_affinity, useNA = "ifany"))
# -------------------------------------------------------------------------
# 4. STANDARDIZE HLA ALLELE
# -------------------------------------------------------------------------
cat("\n4. Standardizing HLA alleles...\n")
peptide_evidence <- peptide_evidence %>%
mutate(
hla_allele_clean = case_when(
# If allele is "human" or generic, set to NA
tolower(hla_allele) == "human" ~ NA_character_,
is.na(hla_allele) ~ NA_character_,
# Keep specific alleles
grepl("HLA-", hla_allele, ignore.case = TRUE) ~ hla_allele,
TRUE ~ NA_character_
)
)
cat("   Specific alleles found:", sum(!is.na(peptide_evidence$hla_allele_clean)), "\n")
cat("   Generic 'human' entries:", sum(peptide_evidence$hla_allele == "human", na.rm = TRUE), "\n")
# Show top alleles if available
if (sum(!is.na(peptide_evidence$hla_allele_clean)) > 0) {
cat("   Top alleles:\n")
print(head(sort(table(peptide_evidence$hla_allele_clean), decreasing = TRUE), 10))
}
# -------------------------------------------------------------------------
# 5. PROCESS DISEASE/TISSUE CONTEXT
# -------------------------------------------------------------------------
cat("\n5. Categorizing disease/tissue context...\n")
# Function to categorize disease relevance
categorize_disease <- function(disease_string, target_disease) {
if (is.na(disease_string) || disease_string == "") {
return(NA_character_)
}
# Split multiple diseases
diseases_list <- strsplit(disease_string, ";")[[1]]
diseases_list <- trimws(diseases_list)
# Check for normal/healthy tissue
if (any(grepl("healthy|normal", diseases_list, ignore.case = TRUE))) {
return("normal")
}
# If target disease specified, check for match
if (!is.null(target_disease) && target_disease != "") {
# Exact match
if (any(grepl(target_disease, diseases_list, ignore.case = TRUE))) {
return("same_disease")
}
# Similar disease (same organ/tissue type) - you can customize this
# Example: if target is "melanoma", "skin cancer" is similar
target_tissue <- extract_tissue_type(target_disease)
if (!is.na(target_tissue)) {
if (any(grepl(target_tissue, diseases_list, ignore.case = TRUE))) {
return("similar")
}
}
}
# Has disease info but not matching target
return("similar")  # Conservative: treat as potentially related
}
# Helper: extract tissue type from disease name
extract_tissue_type <- function(disease) {
tissue_map <- list(
"melanoma" = "skin",
"breast" = "breast",
"lung" = "lung",
"colon" = "colon|colorectal",
"ovarian" = "ovarian",
"leukemia" = "blood|leukemia|lymphoma",
"glioblastoma" = "brain"
)
for (disease_key in names(tissue_map)) {
if (grepl(disease_key, disease, ignore.case = TRUE)) {
return(tissue_map[[disease_key]])
}
}
return(NA_character_)
}
# Apply disease categorization
peptide_evidence <- peptide_evidence %>%
mutate(
disease_tissue = sapply(diseases, categorize_disease, target_disease = target_disease)
)
cat("   Disease/tissue distribution:\n")
print(table(peptide_evidence$disease_tissue, useNA = "ifany"))
# -------------------------------------------------------------------------
# 6. FINALIZE OUTPUT FORMAT
# -------------------------------------------------------------------------
cat("\n6. Creating final output format...\n")
output_df <- peptide_evidence %>%
select(
peptide_id = id,
sequence = id,  # Assuming id contains sequence; adjust if needed
evidence,
hla_allele = hla_allele_clean,
binding_affinity,
binding_metric,
disease_tissue,
hla_class,
# Keep original columns for reference
n_studies,
parent_protein = parent_source,
original_diseases = diseases,
study_references = study_refs
)
cat("\nPreprocessing complete!\n")
cat("Final dataset:\n")
cat("  Rows:", nrow(output_df), "\n")
cat("  Columns:", ncol(output_df), "\n\n")
cat("Ready for Bayesian assessment with:\n")
cat("  - Target allele:", ifelse(is.null(target_allele), "Not specified", target_allele), "\n")
cat("  - Target disease:", ifelse(is.null(target_disease), "Not specified", target_disease), "\n")
cat("  - Target class:", target_class, "\n\n")
return(output_df)
}
#' Quality check function to validate preprocessing
check_preprocessing_quality <- function(preprocessed_df) {
cat("=== PREPROCESSING QUALITY CHECKS ===\n\n")
# Check for required columns
required_cols <- c("peptide_id", "evidence", "hla_allele", "binding_affinity",
"disease_tissue", "hla_class")
missing_cols <- setdiff(required_cols, names(preprocessed_df))
if (length(missing_cols) > 0) {
cat("❌ MISSING COLUMNS:", paste(missing_cols, collapse = ", "), "\n")
} else {
cat("✓ All required columns present\n")
}
# Check data completeness
cat("\n--- Data Completeness ---\n")
for (col in required_cols) {
if (col %in% names(preprocessed_df)) {
pct_missing <- round(sum(is.na(preprocessed_df[[col]])) / nrow(preprocessed_df) * 100, 1)
cat(sprintf("  %s: %.1f%% missing\n", col, pct_missing))
}
}
# Check for duplicates
cat("\n--- Duplicate Check ---\n")
n_duplicates <- sum(duplicated(preprocessed_df$peptide_id))
cat("  Duplicate peptide IDs:", n_duplicates, "\n")
# Evidence distribution
cat("\n--- Evidence Quality ---\n")
cat("  Evidence levels:\n")
print(table(preprocessed_df$evidence))
# HLA information
cat("\n--- HLA Information ---\n")
cat("  Specific alleles:", sum(!is.na(preprocessed_df$hla_allele)), "\n")
cat("  Class distribution:\n")
print(table(preprocessed_df$hla_class, useNA = "ifany"))
cat("\n=== END QUALITY CHECKS ===\n")
}
# Source the preprocessing script
source("utils_exp.R")
# Preprocess your data
preprocessed_data <- preprocess_peptide_data(
df = df,
target_allele = "HLA-A*02:01",    # YOUR TARGET HERE
target_disease = "melanoma",       # YOUR TARGET DISEASE
target_class = "I"
)
# Check quality
check_preprocessing_quality(preprocessed_data)
# Preprocess your data
preprocessed_data <- preprocess_peptide_data(
df = cutoff_4, #df,
target_allele = "HLA-A*02:01",    # YOUR TARGET HERE
target_disease = "melanoma",       # YOUR TARGET DISEASE
target_class = "I"
)
# Check quality
check_preprocessing_quality(preprocessed_data)
results <- bayesian_peptide_assessment(
peptide_data = preprocessed_data,
target_allele = "HLA-A*02:01",
prior_prob = 0.50
)
View(results)
print(results[, c("peptide_id", "sequence", "posterior_prob",
"confidence_level", "interpretation")])
print(results[, c("peptide_id", "evidence_chain")])
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, Gene.Names, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
merge(., df, by = "id", all.x =T) %>%
distinct(.keep_all = T)
results$confidence_level
results$confidence_level %>% unique()
cutoff_4$peptide %>% unique() %>% length()
View(results)
cutoff_4$id %>% unique() %>% length()
df$id %>% unique() %>% length()
results$confidence_level %>% table
df$Binding %>% unique()
