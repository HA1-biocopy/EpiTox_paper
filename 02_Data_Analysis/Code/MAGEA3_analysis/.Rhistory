cat("\n4. Standardizing HLA alleles...\n")
peptide_evidence <- peptide_evidence %>%
mutate(
hla_allele_clean = case_when(
# If allele is "human" or generic, set to NA
tolower(hla_allele) == "human" ~ NA_character_,
is.na(hla_allele) ~ NA_character_,
# Keep specific alleles
grepl("HLA-", hla_allele, ignore.case = TRUE) ~ hla_allele,
TRUE ~ NA_character_
)
)
cat("   Specific alleles found:", sum(!is.na(peptide_evidence$hla_allele_clean)), "\n")
cat("   Generic 'human' entries:", sum(peptide_evidence$hla_allele == "human", na.rm = TRUE), "\n")
# Show top alleles if available
if (sum(!is.na(peptide_evidence$hla_allele_clean)) > 0) {
cat("   Top alleles:\n")
print(head(sort(table(peptide_evidence$hla_allele_clean), decreasing = TRUE), 10))
}
# -------------------------------------------------------------------------
# 5. PROCESS DISEASE/TISSUE CONTEXT
# -------------------------------------------------------------------------
cat("\n5. Categorizing disease/tissue context...\n")
# Function to categorize disease relevance
categorize_disease <- function(disease_string, target_disease) {
if (is.na(disease_string) || disease_string == "") {
return(NA_character_)
}
# Split multiple diseases
diseases_list <- strsplit(disease_string, ";")[[1]]
diseases_list <- trimws(diseases_list)
# Check for normal/healthy tissue
if (any(grepl("healthy|normal", diseases_list, ignore.case = TRUE))) {
return("normal")
}
# If target disease specified, check for match
if (!is.null(target_disease) && target_disease != "") {
# Exact match
if (any(grepl(target_disease, diseases_list, ignore.case = TRUE))) {
return("same_disease")
}
# Similar disease (same organ/tissue type) - you can customize this
# Example: if target is "melanoma", "skin cancer" is similar
target_tissue <- extract_tissue_type(target_disease)
if (!is.na(target_tissue)) {
if (any(grepl(target_tissue, diseases_list, ignore.case = TRUE))) {
return("similar")
}
}
}
# Has disease info but not matching target
return("similar")  # Conservative: treat as potentially related
}
# Helper: extract tissue type from disease name
extract_tissue_type <- function(disease) {
tissue_map <- list(
"melanoma" = "skin",
"breast" = "breast",
"lung" = "lung",
"colon" = "colon|colorectal",
"ovarian" = "ovarian",
"leukemia" = "blood|leukemia|lymphoma",
"glioblastoma" = "brain"
)
for (disease_key in names(tissue_map)) {
if (grepl(disease_key, disease, ignore.case = TRUE)) {
return(tissue_map[[disease_key]])
}
}
return(NA_character_)
}
# Apply disease categorization
peptide_evidence <- peptide_evidence %>%
mutate(
disease_tissue = sapply(diseases, categorize_disease, target_disease = target_disease)
)
cat("   Disease/tissue distribution:\n")
print(table(peptide_evidence$disease_tissue, useNA = "ifany"))
# -------------------------------------------------------------------------
# 6. FINALIZE OUTPUT FORMAT
# -------------------------------------------------------------------------
cat("\n6. Creating final output format...\n")
output_df <- peptide_evidence %>%
select(
peptide_id = id,
sequence = id,  # Assuming id contains sequence; adjust if needed
evidence,
hla_allele = hla_allele_clean,
binding_affinity,
binding_metric,
disease_tissue,
hla_class,
# Keep original columns for reference
n_studies,
parent_protein = parent_source,
original_diseases = diseases,
study_references = study_refs
)
cat("\nPreprocessing complete!\n")
cat("Final dataset:\n")
cat("  Rows:", nrow(output_df), "\n")
cat("  Columns:", ncol(output_df), "\n\n")
cat("Ready for Bayesian assessment with:\n")
cat("  - Target allele:", ifelse(is.null(target_allele), "Not specified", target_allele), "\n")
cat("  - Target disease:", ifelse(is.null(target_disease), "Not specified", target_disease), "\n")
cat("  - Target class:", target_class, "\n\n")
return(output_df)
}
#' Quality check function to validate preprocessing
check_preprocessing_quality <- function(preprocessed_df) {
cat("=== PREPROCESSING QUALITY CHECKS ===\n\n")
# Check for required columns
required_cols <- c("peptide_id", "evidence", "hla_allele", "binding_affinity",
"disease_tissue", "hla_class")
missing_cols <- setdiff(required_cols, names(preprocessed_df))
if (length(missing_cols) > 0) {
cat("❌ MISSING COLUMNS:", paste(missing_cols, collapse = ", "), "\n")
} else {
cat("✓ All required columns present\n")
}
# Check data completeness
cat("\n--- Data Completeness ---\n")
for (col in required_cols) {
if (col %in% names(preprocessed_df)) {
pct_missing <- round(sum(is.na(preprocessed_df[[col]])) / nrow(preprocessed_df) * 100, 1)
cat(sprintf("  %s: %.1f%% missing\n", col, pct_missing))
}
}
# Check for duplicates
cat("\n--- Duplicate Check ---\n")
n_duplicates <- sum(duplicated(preprocessed_df$peptide_id))
cat("  Duplicate peptide IDs:", n_duplicates, "\n")
# Evidence distribution
cat("\n--- Evidence Quality ---\n")
cat("  Evidence levels:\n")
print(table(preprocessed_df$evidence))
# HLA information
cat("\n--- HLA Information ---\n")
cat("  Specific alleles:", sum(!is.na(preprocessed_df$hla_allele)), "\n")
cat("  Class distribution:\n")
print(table(preprocessed_df$hla_class, useNA = "ifany"))
cat("\n=== END QUALITY CHECKS ===\n")
}
# Source the preprocessing script
source("utils_exp.R")
# Preprocess your data
preprocessed_data <- preprocess_peptide_data(
df = df,
target_allele = "HLA-A*02:01",    # YOUR TARGET HERE
target_disease = "melanoma",       # YOUR TARGET DISEASE
target_class = "I"
)
# Check quality
check_preprocessing_quality(preprocessed_data)
# Preprocess your data
preprocessed_data <- preprocess_peptide_data(
df = cutoff_4, #df,
target_allele = "HLA-A*02:01",    # YOUR TARGET HERE
target_disease = "melanoma",       # YOUR TARGET DISEASE
target_class = "I"
)
# Check quality
check_preprocessing_quality(preprocessed_data)
results <- bayesian_peptide_assessment(
peptide_data = preprocessed_data,
target_allele = "HLA-A*02:01",
prior_prob = 0.50
)
View(results)
print(results[, c("peptide_id", "sequence", "posterior_prob",
"confidence_level", "interpretation")])
print(results[, c("peptide_id", "evidence_chain")])
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, Gene.Names, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
merge(., df, by = "id", all.x =T) %>%
distinct(.keep_all = T)
results$confidence_level
results$confidence_level %>% unique()
cutoff_4$peptide %>% unique() %>% length()
View(results)
cutoff_4$id %>% unique() %>% length()
df$id %>% unique() %>% length()
results$confidence_level %>% table
df$Binding %>% unique()
# ============================================
# # STEP 1: Load data
# loading IEDB annotation
# ---------------------------
files = list.files(path = "~/Documents/Projects/MAGEA3/results/Cutoff_4/PrediTopes/DB_annotation/",
pattern = "*sequence.csv", full.names = T)
experimental_df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
qualitative_measure, mhc_class, mhc_allele_name,
assay_names, disease_names) %>%
dplyr::rename(
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names,
Experimental_method = assay_names,
Binding = qualitative_measure,
hla_class = mhc_class,
hla_allele = mhc_allele_name)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
disease = gsub("\\[\\'(.+)\\'\\]", "\\1", disease),
curated_source_antigen.accession = NULL,
id = paste0(uniprot, "_", peptide),
uniprot = NULL, peptide = NULL) %>%
relocate(id)
# Bayesian Peptide Evidence Assessment
# ============================================
#
# This script assesses off-target peptides using Bayesian probability updating
# Goal: "How critical is the off-target based on experimental evidence?"
#
# Author: Hoor. Al-Hasani
# Date: 2025
# ----------------
library(dplyr)
experimental_df = lapply(files, function(f){
if (file.size(f) == 0) return(NULL)
first_line <- readLines(f, n = 1, warn = FALSE)
if (length(first_line) == 0 || all(trimws(first_line) == "")) return(NULL)
x = read.csv(f) %>%
select(parent_source_antigen_name, curated_source_antigen.accession, linear_sequence, reference_id,
qualitative_measure, mhc_class, mhc_allele_name,
assay_names, disease_names) %>%
dplyr::rename(
peptide = linear_sequence,
study_ref = reference_id,
disease = disease_names,
Experimental_method = assay_names,
Binding = qualitative_measure,
hla_class = mhc_class,
hla_allele = mhc_allele_name)
return(x)
}) %>%
do.call("rbind",.) %>%
mutate(uniprot = gsub("\\.\\d+", "", curated_source_antigen.accession),
disease = gsub("\\[\\'(.+)\\'\\]", "\\1", disease),
curated_source_antigen.accession = NULL,
id = paste0(uniprot, "_", peptide),
uniprot = NULL, peptide = NULL) %>%
relocate(id)
# loading EpiTox's peptide list
# --------------------------------
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, Gene.Names, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
merge(., df, by = "id", all.x =T) %>%
distinct(.keep_all = T)
# loading EpiTox's peptide list
# --------------------------------
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, Gene.Names, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
merge(., experimental_df, by = "id", all.x =T) %>%
distinct(.keep_all = T)
View(cutoff_4)
# ============================================
# # STEP 2. Load all scripts
source("utils_exp.R")
source("Bayesian_preprocess_experimental_data.R")
source("bayesian_peptide_assessment.R")
source("Bayesian_peptide_assessment.R")
source("Bayesian_peptide_assessment.R")
# # STEP 2. Preprocess
preprocessed <- preprocess_for_bayesian(cutoff_4, experimental_df, ...)
# # STEP 2. Preprocess
preprocessed <- preprocess_for_bayesian(cutoff_4, experimental_df,
target_allele = "HLA-A*02:01", target_disease = "bladder", target_class = "I")
# # STEP 2. Preprocess
preprocessed <- preprocess_for_bayesian(cutoff_4,
target_allele = "HLA-A*02:01", target_disease = "bladder", target_class = "I")
# # STEP 2. Preprocess
preprocessed <- preprocess_for_bayesian(experimental_df = cutoff_4,
target_allele = "HLA-A*02:01", target_disease = "bladder", target_class = "I")
# loading EpiTox's peptide list
# --------------------------------
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, Gene.Names, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
#merge(., experimental_df, by = "id", all.x =T) %>%
distinct(.keep_all = T)
# # STEP 2. Preprocess
preprocessed <- preprocess_for_bayesian(cutoff_4, experimental_df, target_allele = "HLA-A*02:01",
target_disease = "bladder", target_class = "I")
experimental_df$hla_class %>% unique()
experimental_df$hla_class %>% table1()
experimental_df$hla_class %>% table()
View(experimental_df)
View(preprocessed)
peptides_df = cutoff_4
target_allele = "HLA-A*02:01"
target_disease = "bladder"
target_class = "I"
# Step 1: Aggregate experimental evidence
experimental_summary <- aggregate_experimental_evidence(
experimental_df = experimental_df,
target_allele = target_allele,
target_disease = target_disease,
target_class = target_class
)
View(experimental_df)
experimental_df$id %>% unique()
# Step 1: Aggregate experimental evidence
experimental_summary <- aggregate_experimental_evidence(
experimental_df = experimental_df,
target_allele = target_allele,
target_disease = target_disease,
target_class = target_class
)
experimental_df$id %>% unique() %>% length()
experimental_df$hla_class %>% unique() %>% length()
experimental_df$hla_class %>% unique()
source("Bayesian_preprocess_experimental_data.R")
# Step 1: Aggregate experimental evidence
experimental_summary <- aggregate_experimental_evidence(
experimental_df = experimental_df,
target_allele = target_allele,
target_disease = target_disease,
target_class = target_class
)
source("Bayesian_preprocess_experimental_data.R")
# Step 1: Aggregate experimental evidence
experimental_summary <- aggregate_experimental_evidence(
experimental_df = experimental_df,
target_allele = target_allele,
target_disease = target_disease,
target_class = target_class
)
source("utils_exp.R")
source("Bayesian_preprocess_experimental_data.R")
source("Bayesian_peptide_assessment.R")
# Step 1: Aggregate experimental evidence
experimental_summary <- aggregate_experimental_evidence(
experimental_df = experimental_df,
target_allele = target_allele,
target_disease = target_disease,
target_class = target_class
)
experimental_df$Binding %>% unique()
experimental_df$Binding %>% table1
experimental_df$Binding %>% table
aggregated <- experimental_df %>%
group_by(id) %>%
summarise(
# -----------------------------------------------------------------------
# EVIDENCE LEVEL: Count unique studies
# -----------------------------------------------------------------------
n_studies = n_distinct(study_ref, na.rm = TRUE),
study_refs = paste(unique(study_ref), collapse = ";"),
evidence = case_when(
n_studies >= 3 ~ "multiple_studies",
n_studies == 2 ~ "two_study",
n_studies == 1 ~ "one_study",
TRUE ~ "predicted"
),
# -----------------------------------------------------------------------
# HLA ALLELE-SPECIFIC BINDING (CRITICAL: Maintains allele-binding relationship)
# -----------------------------------------------------------------------
# Get binding info specific to target allele
binding_info = list(get_allele_specific_binding(hla_allele, Binding, target_allele)),
has_target_allele = binding_info[[1]]$has_target_allele,
target_allele_binding = binding_info[[1]]$target_binding,
any_allele_binding = binding_info[[1]]$any_binding,
all_bindings = binding_info[[1]]$all_bindings,
# Final binding affinity: Use target-specific if available, otherwise any
binding_affinity = ifelse(!is.na(target_allele_binding),
target_allele_binding,
any_allele_binding),
# -----------------------------------------------------------------------
# HLA ALLELE: Prioritize target allele if present
# -----------------------------------------------------------------------
hla_allele = get_best_allele(hla_allele, target_allele),
# -----------------------------------------------------------------------
# HLA CLASS
# -----------------------------------------------------------------------
hla_class = {
classes <- hla_class[!is.na(hla_class) & hla_class != ""]
if (length(classes) == 0) {
NA_character_
} else if (target_class %in% classes) {
target_class  # Prioritize target class
} else {
first(classes)
}
},
# -----------------------------------------------------------------------
# DISEASE/TISSUE CONTEXT
# -----------------------------------------------------------------------
diseases = paste(unique(disease[disease != "" & !is.na(disease)]), collapse = ";"),
disease_tissue = categorize_disease(diseases[1], target_disease),
# -----------------------------------------------------------------------
# METADATA (for reference)
# -----------------------------------------------------------------------
parent_protein = first(parent_source_antigen_name),
methods = paste(unique(Experimental_method), collapse = ";"),
.groups = "drop"
) %>%
# Remove the temporary list column
select(-binding_info)
View(aggregated)
# # STEP 2. Preprocess
preprocessed <- preprocess_for_bayesian(cutoff_4, experimental_df, target_allele = "HLA-A*02:01",
target_disease = "bladder", target_class = "I")
#   target_disease = "melanoma",
#   target_class = "I"
# ============================================
# # STEP 3. Assess
results <- bayesian_peptide_assessment(preprocessed, ...)
#   target_disease = "melanoma",
#   target_class = "I"
# ============================================
# # STEP 3. Assess
results <- bayesian_peptide_assessment(preprocessed, target_allele, target_class)
# ============================================
# # STEP 4. Report
generate_assessment_report(results)
source("Bayesian_peptide_assessment.R")
# ============================================
# # STEP 4. Report
DIR = "/Users/hoor.alhasani/Documents/Projects/D003/Patent_Paper/paper_materials/02_Data_Analysis/data/Bayesian/MAGEA3"
generate_assessment_report(results,
output_prefix = DIR)
results
results %>% dim()
PieChart(interpretation, data = results, hole = 0,
fill = c("#338232", "#FBB800", "#98D0BC", "#958BB2", "#D14B47", "#438D99"),
color="white",
main = paste0("Total sequences: ", nrow(df)),
labels_cex = 0.6)
#   target_disease = "melanoma",
#   target_class = "I"
# ============================================
# # STEP 3. Assess
library(lessR)
PieChart(interpretation, data = results, hole = 0,
fill = c("#338232", "#FBB800", "#98D0BC", "#958BB2", "#D14B47", "#438D99"),
color="white",
main = paste0("Total sequences: ", nrow(df)),
labels_cex = 0.6)
results[1,]
results[1,31:34]
results[1:5,31:34]
PieChart(confidence_level, data = results, hole = 0,
fill = c("#338232", "#FBB800", "#98D0BC", "#958BB2", "#D14B47", "#438D99"),
color="white",
main = paste0("Total sequences: ", nrow(df)),
labels_cex = 0.6)
PieChart(confidence_level, data = results, hole = 0,
fill = c("#338232", "#FBB800", "#98D0BC", "#958BB2", "#D14B47", "#438D99"),
color="white",
main = paste0("Total peptides: ", nrow(results)),
labels_cex = 0.6)
PieChart(confidence_level, data = results, hole = 0,
fill = biocopy_colors,
color="white",
main = paste0("Total peptides: ", nrow(results)),
labels_cex = 0.6)
biocopy_colors = c("#A2C510", "#FBB800", "#99CFE9", "#939597", "#C61E19", "#438D99", "#958BB2", "#6B7B88",
"#338232", "#F08000", "#3373A1", "#64686A", "#D14B47", "#98D0BC", "#4F3D7F", "#2C4255")
PieChart(confidence_level, data = results, hole = 0,
fill = biocopy_colors,
color="white",
main = paste0("Total peptides: ", nrow(results)),
labels_cex = 0.6)
biocopy_colors = c("#A2C510", "#99CFE9", "#FBB800", "#939597", "#C61E19", "#438D99", "#958BB2", "#6B7B88",
"#338232", "#F08000", "#3373A1", "#64686A", "#D14B47", "#98D0BC", "#4F3D7F", "#2C4255")
PieChart(confidence_level, data = results, hole = 0,
fill = biocopy_colors,
color="white",
main = paste0("Total peptides: ", nrow(results)),
labels_cex = 0.6)
experimental_df$disease %>% unique()
# ============================================
# # STEP 2. Load all scripts
source("utils_exp.R")
source("Bayesian_preprocess_experimental_data.R")
source("Bayesian_peptide_assessment.R")
cutoff_4 %>% colnames()
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx")
cutoff_4 %>% colnames()
experimental_df$id %>% unique() %>% length()
View(results)
PieChart(interpretation, data = results, hole = 0,
fill = biocopy_colors,
color="white",
main = paste0("Total peptides: ", nrow(results)),
labels_cex = 0.6)
View(results[results$peptide == "AQAELQHVL",])
results$evidence_chain[results$peptide == "AQAELQHVL"]
# loading EpiTox's peptide list
# --------------------------------
cutoff_4 = openxlsx::read.xlsx("~/Documents/Projects/MAGEA3/results/Cutoff_4/Table/HPA_genes_nTPM.xlsx") %>%
select(ensembl_gene_id, uniprot, Gene.Names, peptide, blosum_similarity, mismatch, Wildtype, Peptide_HLA_Atlas, affinity) %>%
distinct(.keep_all = T) %>%
mutate(id = paste0(uniprot, "_", peptide)) %>%
#merge(., experimental_df, by = "id", all.x =T) %>%
distinct(.keep_all = T)
View(cutoff_4)
