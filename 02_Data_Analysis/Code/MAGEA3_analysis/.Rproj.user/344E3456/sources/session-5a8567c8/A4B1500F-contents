---
date: "`r Sys.Date()`"
params:
  scripts: "/Users/hoor.alhasani/Documents/Projects/D003/D003_bioinformatics/WPs/EpiTox/AnnoTopes/R_scripts"
  rprt_title: "Off-targets"
  target: "MAGEA3"
  target_sequence: "KVAELVHFL"
  target_ens: "ENSG00000221867"
  predi_offtargets: "/Volumes/slurmUsers/hoor.alhasani/data/EpiTox/V2.5/MAGEA3/cutoff_3/Reports/PrediTopes_MAGEA3.xlsx"
  offtarget_gxp: "/Volumes/slurmUsers/hoor.alhasani/data/EpiTox/V2.5/MAGEA3/cutoff_3/AnnoTopes/HPA_genes_nTPM.xlsx"
  hpa: "/Volumes/bigData/dataHub/resourcea/DB/Protein_atlas/rna_tissue_hpa.tsv"
  outdir: "/Users/hoor.alhasani/Documents/Projects/D003/Data/WT1/Reports/PrediTopes"
  outname: "Final_results.csv"
mathjax: true
output: 
  html_document:
    theme: sandstone
    toc: true
    toc_float: true
    toc_depth: 4
    number_sections: false

title: "<img src=\"./EpiTox.png\" style=\"float: right;width: 300px\"/>`r params$rprt_title` report for target `r params$target`" 
---
***

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(ggseqlogo)
library(rmarkdown)
library(ggplot2)
library(plotly)
library(lessR)
library(dplyr)
library(tidyr)
library(DT)

biocopy_colors = c("#A2C510", "#FBB800", "#99CFE9", "#939597", "#C61E19", "#438D99", "#958BB2", "#6B7B88",
                   "#338232", "#F08000", "#3373A1", "#64686A", "#D14B47", "#98D0BC", "#4F3D7F", "#2C4255")

source("./Utils.R")
```

```{r readin_input, include=F, echo=FALSE, comment="#"}

print(params$predi_offtargets)
# reading offtopes
offtargets = openxlsx::read.xlsx(params$predi_offtargets) %>% 
  mutate(
    pep_id = paste0(ensembl_gene_id, "_", peptide), 
    binder = case_when(
      affinity < 50 ~ "High",
      affinity < 500 ~ "Medium",
      affinity < 5000 ~ "Low",
      TRUE ~ "Random"),
    presented = case_when(
      presentation_percentile <= 1 ~ "Very high",
      presentation_percentile <= 2 ~ "High",
      TRUE ~ "Random")
)


hpa_offtarget = read.delim(params$hpa) %>%
 filter(Gene %in% unique(offtargets$ensembl_gene_id))

```


```{r print_summary_tbl, echo=FALSE, eval=F}
kable(summary_df) %>%
	  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F) %>%
  #scroll_box(width = "50%") %>%
  pack_rows(index = c("Gene level" = 3, "Peptides" = 6, "Gene expression" = 3), 
            label_row_css = "background-color: #A2C510; color: #fff;") %>%
  footnote(#general = "Here is a general comments of the table. ",
           number = c("Gene expression in different databases will be based on the unique genes.",
                      "If the DB supports transcript information, the heatmap will utilize all unique transcripts."))
```

## Gene expression of normal tissue

from the human protein atlas all gene expression results were based on the _nTPM_, normalized TPM values.

***

```{r hm, echo = FALSE, fig.align ='center', warning = FALSE, message = FALSE, out.width="100%", out.height= "30%",eval=T}

target_gxp = hpa_offtarget %>%
  filter(Gene == params$target_ens) %>%
  select(Gene, Tissue, nTPM)

off_targets_gxp = hpa_offtarget %>%
  filter(Gene != params$target_ens) %>%
  select(Gene, Tissue, nTPM)

merged_df = target_gxp %>%
  left_join(off_targets_gxp, by ="Tissue", suffix = c("_target", "_offtargets")) %>%
  mutate(FoldChange = nTPM_offtargets/nTPM_target,
         log2FC = log2(nTPM_offtargets+1) - log2(nTPM_target+1)) 

max_log2FC <- max(merged_df$log2FC[is.finite(merged_df$log2FC)], na.rm = TRUE)
min_log2FC <- min(merged_df$log2FC[is.finite(merged_df$log2FC)], na.rm = TRUE)

merged_df <- merged_df %>%
  mutate(log2FC = ifelse(is.infinite(log2FC) & log2FC > 0, max_log2FC, log2FC),
         log2FC = ifelse(is.infinite(log2FC) & log2FC < 0, min_log2FC, log2FC))


ggplot(merged_df, aes(y = Tissue, x = Gene_offtargets, fill = log2FC)) +
  geom_tile() +
  scale_fill_gradient2(low = "#2C4255", mid = "white", high = "#A2C510", midpoint = 0) +
  theme_minimal() + 
  ggtitle("Gene expression of off-targets compared to the target") +
  labs(y = "Tissue", x = "Off-target genes") +
  theme(axis.text.x = element_blank())

hm = merged_df %>%
  select(Gene_offtargets, Tissue, log2FC) %>%
  spread(Tissue, log2FC)

heatmap_matrix <- as.matrix(hm[,-1])  # Remove gene column
rownames(heatmap_matrix) <- hm$Gene_offtargets

```

$$ 
  log2FC  = log2(nTPM_{offtarget} +1) - log2(nTPM_{target} +1)
$$
- High values indicate off-target genes have higher expression compared to the target and visa versa

***

# Motif analysis of the off-targets

In this part, the off-targets are classified by their similarity to the target.


```{r motif_analysis, echo = FALSE, fig.align ='center', warning = FALSE, message = FALSE, results='hide', eval =T}

# Compute pairwise alignment scores
known_peptide = params$target_sequence

x = offtargets %>% filter(stringr::str_detect(peptide, "[^A-Za-z]")) %>%
distinct(peptide, .keep_all = T)

peptides = offtargets$peptide[which(! offtargets$peptide %in% x$peptide )] %>% unique()

alignment_scores <- sapply(peptides, function(p) {
 Biostrings::pairwiseAlignment(known_peptide, p, type = "global", substitutionMatrix = "BLOSUM62")@score
})

alignment_scores_df = data.frame(peptide = names(alignment_scores), blosum_similarity = alignment_scores)
offtargets = merge(offtargets, alignment_scores_df, by = "peptide")


ranking_df = offtargets %>%
  select(peptide, blosum_similarity, mismatch, affinity) %>%
  #dplyr::rename(mismatch = similarity) %>%
  distinct(peptide, mismatch, .keep_all = T) %>%
  mutate(normalized_blosum_similarity =  (blosum_similarity - min(blosum_similarity)) / (max(blosum_similarity) - min(blosum_similarity)),
         normalized_affinity = case_when(
           affinity < 50 ~ 1,
           affinity < 500 ~ 0.66,
           affinity < 5000 ~ 0.33,
           TRUE ~ 0),
         #normalized_affinity = 1 - (affinity - min(affinity, na.rm = TRUE))/(max(affinity, na.rm = TRUE) - min(affinity, na.rm = TRUE)),
         score = (normalized_blosum_similarity + normalized_affinity)/2)
         #mean_score = mean(score, na.rm = T),
         #sd_score = sd(score, na.rm = T),
         #mean_score - 0.5 * sd_score,
         #quantile(score, 0.7)
         #Rank = case_when(
        #   score >= mean_score + 0.5 * sd_score ~ "High",
        #   score >= mean_score - 0.5 * sd_score & score < mean_score + 0.5 * sd_score ~ "Moderate",
        #   score < mean_score - 0.5 * sd_score ~ "Low",
        #   TRUE ~ "Random"))
  

set.seed(123)  # Ensure reproducibility
kmeans_result <- kmeans(ranking_df$score, centers = 3)
cluster_labels <- factor(kmeans_result$cluster, 
                         levels = order(tapply(ranking_df$score, kmeans_result$cluster, mean)), 
                         labels = c("Low", "Moderate", "High"))

ranking_df <- ranking_df %>%
  mutate(Rank = cluster_labels)

PieChart(Rank, data = ranking_df, hole = 0,
         fill = c("#338232", "#FBB800", "#98D0BC", "#958BB2", "#D14B47", "#438D99"),
         color="white",
         main = paste0("Total sequences: ", nrow(df)),
         labels_cex = 0.6)

ranking_list = list(
  "High" = ranking_df$peptide[which(ranking_df$Rank == "High")],
  "Moderate" = ranking_df$peptide[which(ranking_df$Rank == "Moderate")], 
  "Low" = ranking_df$peptide[which(ranking_df$Rank == "Low")],
  "Random" = ranking_df$peptide[which(ranking_df$Rank == "Random")]
)

filtered_categories <- ranking_list[sapply(ranking_list, function(x) length(x) > 0)]

# Check if there are any valid categories to plot
if (length(filtered_categories) > 0) {
  ggseqlogo(filtered_categories, ncol =1, method = "prob") +
    scale_fill_manual(values = c("Polar" = "#FBB800", "Neutral" = "#99CFE9", "Acidic" = "#C61E19", "Basic" = "#A2C510", "Hydrophobic" = "#438D99"))
} else {
  print("No sequences available for plotting.")
}

g = ggplot(ranking_df %>% 
         mutate(Rank = factor(Rank, levels = c("High", "Moderate", "Low", "Random")))) +
  geom_jitter(aes(affinity, blosum_similarity, col = Rank, 
                  text = paste("peptide:", peptide,
                               "\nmismatch:", mismatch))) +
  theme_light() +
  scale_color_manual(values = biocopy_colors) +
  ggtitle("Off-targets classification") +
  labs(x = "Affinity (nM)", y = "BLOSUM similarity", col = "Peptides classification") +
  theme(legend.position = "bottom")

```

```{r classification, echo = FALSE, fig.align ='center', warning = FALSE, message = FALSE, fig.dim=c(8,4)}
ggplotly(g) %>%
  layout(legend = list(orientation = 'h', x = 0.1, y = -0.5))

# ggplot(ranking_df %>% 
#          mutate(Rank= factor(Rank, levels = c("High", "Moderate", "Low")))) +
#   geom_jitter(aes(normalized_affinity, normalized_blosum_similarity, col = Rank)) +
#   theme_light() +
#   scale_color_manual(values = biocopy_colors) +
#   ggtitle("Off-targets classification") +
#   theme(legend.position = "bottom") +
#   labs(x = "Normalized affinity", y = "Normalized BLOSUM similarity", col = "Peptides classification")
```

# Results

```{r save_rslts, echo=FALSE, fig.dim=c(8,4), eval=T}

#print(params$offtarget_gxp)
off_targets_gxp = openxlsx::read.xlsx(params$offtarget_gxp) %>%
  merge(., ranking_df[,c("peptide", "blosum_similarity", "score", "Rank")], by = "peptide", all.x = T) %>%
  relocate(peptide, Rank, score, blosum_similarity, .after = "Gene.Names") %>%
  dplyr::rename(Ranking_score = score) %>%
  mutate(Ranking_score = ifelse(is.na(Ranking_score), 0, Ranking_score),
         Rank = as.character(Rank),
         Rank = ifelse(is.na(Rank), "Random", Rank))

# double check the score with original values
# ggplot(off_targets_gxp, aes(Ranking_score, mismatch, col = Rank)) + geom_point()
g = ggplot(off_targets_gxp, aes(blosum_similarity, mismatch, col = Rank, text = paste("peptide:", peptide))) + 
  geom_jitter() +
  theme_light() +
  scale_color_manual(values = biocopy_colors) +
  ggtitle("Dissimilarity vs. Similarity") +
  theme(legend.position = "bottom") +
  labs(x = "BLOSUM62 similarity", y = "Edit distance -> dissimilarity")

ggplotly(g) %>%
  layout(legend = list(orientation = 'h', x = 0.1, y = -0.5))
# ggplot(off_targets_gxp, aes(normalized_blosum_similarity, mismatch, col = Rank)) + geom_point()


  #mutate(Rank = "Random") %>%
  #relocate(Rank, .after = "affinity")

# off_targets_gxp$Rank[which(off_targets_gxp$peptide %in% ranking_df$peptide[grep("high", ranking_df$Rank, ignore.case = T)])] = "High"
# off_targets_gxp$Rank[which(off_targets_gxp$peptide %in% ranking_df$peptide[grep("low", ranking_df$Rank, ignore.case = T)])] = "Low"
# off_targets_gxp$Rank[which(off_targets_gxp$peptide %in% ranking_df$peptide[grep("moderate", ranking_df$Rank, ignore.case = T)])] = "Moderate"
# off_targets_gxp$Rank[which(off_targets_gxp$peptide %in% ranking_df$peptide[grep("random", ranking_df$Rank, ignore.case = T)])] = "Random"

#print(paste0(params$outdir, "/", params$outname, ".csv"))
openxlsx::write.xlsx(off_targets_gxp, paste0(params$outdir, ".xlsx"), row.names = F, quote = F)

 

off_targets_gxp %>%
  datatable(data = ., caption = "Offtargets list with ranking classification",
            filter = "bottom", style = 'bootstrap', 
            class = 'table-condensed',
            options = list(
              pageLength = 5,
              scrollX = TRUE,
              scrollCollapse = TRUE,
              columnDefs = list(list(className = 'dt-center', targets = 1:ncol(off_targets_gxp))))
              )


```

